import React, { useState, useEffect } from "react";
import { InCross } from "react-icons/im";
import { Button, Pagination } from "@mui/material";
import { useDispatch, useSelector } from "react-redux";
import ModalTemplate from "../ModalTemplate";
import usePaginationHandler from "../../hooks/usePaginationHandler";
import CloudCoreSearchBar from "../CustomStyledComponents/CloudCoreSearchBar";
import AddPermissionToCartTile from "../PermissionComponents/AddPermissionToCartTile";
import {
    useGetAllUniversalPermissionsQuery,
    useUpdateTeamAdminPermissionsMutation,
} from "../../services/TeamsApiService";
import { toggleShowAddAdminPermissionModal } from "../../store/slices/ModalManager";
import "../css/AddPermissionModal.css";

const AddPermissionModal = () => {
    const dispatch = useDispatch();

    // Retrieve modal properties from Redux.
    const modalHeading = useSelector(
        (state) => state.modalManager.addAdminPermissionModal.heading
    );
    const teamName = useSelector(
        (state) => state.modalManager.addAdminPermissionModal.teamName
    );
    const show = useSelector(
        (state) => state.modalManager.addAdminPermissionModal.show
    );

    if (!show) return null;

    const [page, rowsPerPage, unusedRowsPerPage, resetPages, handleChangePage] =
        usePaginationHandler();
    const fixedRowsPerPage = 4;

    const [searchValue, setSearchValue] = useState("");
    const [selectedPermissions, setSelectedPermissions] = useState([]);
    const [filteredPermissions, setFilteredPermissions] = useState([]);

    const { data: allPermissions = [], isLoading: permissionsLoading } =
        useGetAllUniversalPermissionsQuery();

    const [updateTeamAdminPermissions] = useUpdateTeamAdminPermissionsMutation();

    // Filter permissions on search or data change.
    useEffect(() => {
        if (allPermissions && !permissionsLoading) {
            const formattedSearch = searchValue.toLowerCase();
            const filtered = allPermissions.filter((permission) => {
                return (
                    permission.name.toLowerCase().includes(formattedSearch) ||
                    permission.description.toLowerCase().includes(formattedSearch)
                );
            });
            setFilteredPermissions(filtered);
            resetPages();
        }
    }, [searchValue, allPermissions, permissionsLoading, resetPages]);

    const totalPages = Math.ceil(filteredPermissions.length / fixedRowsPerPage);

    // Updated rendering function for permissions.
    const permissionsOnCurrentPage = () => {
        // Show a consistent text placeholder when loading.
        if (permissionsLoading) {
            return (
                <div className="no-permissions">
                    <span className="no-permissions-text">
                        Loading permissions...
                    </span>
                </div>
            );
        }

        // When no permissions are found.
        if (filteredPermissions.length === 0) {
            return (
                <div className="no-permissions">
                    <span className="no-permissions-text">
                        No permissions found
                    </span>
                </div>
            );
        }

        const startIndex = fixedRowsPerPage * (page - 1);
        const endIndex = Math.min(
            filteredPermissions.length,
            fixedRowsPerPage * page
        );

        return filteredPermissions.slice(startIndex, endIndex).map((permission) => (
            <AddPermissionToCartTile
                key={`db-permission-${permission.id}`}
                isLoading={permissionsLoading}
                permission={permission}
                permissionSelected={selectedPermissions.some(
                    (perm) => perm.name === permission.name
                )}
                togglePermission={() => {
                    let updatedSelected = [...selectedPermissions];
                    const index = updatedSelected.findIndex(
                        (perm) => perm.name === permission.name
                    );

                    if (index !== -1) {
                        updatedSelected.splice(index, 1);
                    } else {
                        updatedSelected.push({ name: permission.name });
                    }

                    setSelectedPermissions(updatedSelected);
                }}
            />
        ));
    };

    const closeModalCallback = () => {
        dispatch(toggleShowAddAdminPermissionModal({ show: false }));
    };

    const confirmPermissionAddition = async () => {
        try {
            const payload = {
                teamName,
                admin_permissions: selectedPermissions.map((perm) => ({
                    name: perm.name,
                })),
            };

            const response = await updateTeamAdminPermissions(payload).unwrap();

            if (response.responseStatus === 200 || response.responseStatus === 201) {
                console.log("Permissions updated successfully!");
                closeModalCallback();
            } else {
                console.log("Failed to update permissions.");
            }
        } catch (err) {
            console.error("Error updating permissions", err);
            alert("Error updating permissions!");
        }
    };

    return (
        <ModalTemplate closeModalCallback={closeModalCallback}>
            <div className="modal-container">
                <div className="modal-header">
                    <div className="modal-title">{modalHeading}</div>
                    <InCross onClick={closeModalCallback} className="modal-close" />
                </div>

                <div className="modal-body">
                    <div className="modal-search-pagination">
                        <CloudCoreSearchBar
                            placeholder="Permission name"
                            disabled={filteredPermissions.length === 0 && searchValue.length === 0}
                            value={searchValue}
                            setSearchValue={(e) => setSearchValue(e.target.value)}
                        />

                        <Pagination
                            variant="outlined"
                            shape="rounded"
                            boundaryCount={1}
                            siblingCount={1}
                            page={page}
                            onChange={handleChangePage}
                            count={totalPages}
                        />
                    </div>

                    <div className="modal-content">
                        {permissionsOnCurrentPage()}
                    </div>
                </div>

                <div className="modal-footer">
                    <Button
                        variant="contained"
                        color="error"
                        onClick={closeModalCallback}
                    >
                        Cancel
                    </Button>
                    <Button variant="outlined" onClick={confirmPermissionAddition}>
                        Add Permission
                    </Button>
                </div>
            </div>
        </ModalTemplate>
    );
};

export default AddPermissionModal;
