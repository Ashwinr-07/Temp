import React, { useState, useMemo } from "react";
import { ImCross } from "react-icons/im";
import { Button, Pagination } from "@mui/material";
import { useDispatch, useSelector } from "react-redux";
import { toggleShowAddAdminPermissionModal } from "../../store/slices/ModalManager";
import ModalTemplate from "./ModalTemplate";

// Custom hooks and components
import usePaginationHandler from "../../hooks/usePaginationHandler";
import CloudCoreSearchBar from "../../components/CustomStyledComponents/CloudSearchBar";
import AddPermissionToCartTitle from "../../PermissionComponents/AddPermissionToCartTitle";

const AddPermissionModalHardcoded = () => {
  const dispatch = useDispatch();

  const modalHeading = useSelector(
    (state) => state.modalManager.addAdminPermissionModal.heading
  );
  const show = useSelector(
    (state) => state.modalManager.addAdminPermissionModal.show
  );

  if (!show) return null;

  // Destructure the custom pagination hook (array destructuring)
  const [{ page, rowsPerPage }, resetPages, handleChangePage] =
    usePaginationHandler();

  const [searchValue, setSearchValue] = useState("");
  const [selectedPermissions, setSelectedPermissions] = useState([]);

  const closeModalCallback = () => {
    dispatch(toggleShowAddAdminPermissionModal({ show: false }));
  };

  // Create 16 hardcoded permissions
  const permissionsList = useMemo(() => {
    return Array.from({ length: 16 }, (_, i) => ({
      id: i + 1,
      name: `Permission ${i + 1}`,
      description: `Description for Permission ${i + 1}`,
    }));
  }, []);

  // Filter permissions based on search query (case-insensitive)
  const filteredPermissions = useMemo(() => {
    const formattedSearch = searchValue.toLowerCase();
    return permissionsList.filter(
      (permission) =>
        permission.name.toLowerCase().includes(formattedSearch) ||
        permission.description.toLowerCase().includes(formattedSearch)
    );
  }, [permissionsList, searchValue]);

  const totalPages = Math.ceil(filteredPermissions.length / rowsPerPage);

  // Render the permission tiles for the current page using your tile component.
  const permissionsOnCurrentPage = () => {
    if (filteredPermissions.length > 0) {
      const perms = [];
      const startIndex = rowsPerPage * (page - 1);
      const endIndex = Math.min(filteredPermissions.length, rowsPerPage * page);
      for (let i = startIndex; i < endIndex; i++) {
        const permission = filteredPermissions[i];
        perms.push(
          <AddPermissionToCartTitle
            key={`hardcoded-permission-${permission.id}`}
            isLoading={false}
            permission={permission}
            permissionSelected={selectedPermissions.some(
              (perm) => perm.id === permission.id
            )}
            togglePermission={() => {
              // Toggle selection: if already selected, remove it; otherwise add it.
              const alreadySelected = selectedPermissions.some(
                (perm) => perm.id === permission.id
              );
              if (alreadySelected) {
                setSelectedPermissions(
                  selectedPermissions.filter((perm) => perm.id !== permission.id)
                );
              } else {
                setSelectedPermissions([...selectedPermissions, permission]);
              }
            }}
          />
        );
      }
      return perms;
    } else {
      return (
        <div className="w-full flex flex-col items-center justify-center">
          <span className="mt-8 text-2xl font-bold">No permissions found</span>
        </div>
      );
    }
  };

  return (
    <ModalTemplate closeModalCallback={closeModalCallback}>
      <div className="modal">
        {/* Modal Header */}
        <div className="modal-heading-container">
          <div className="modal-heading-container-value">{modalHeading}</div>
          <ImCross
            onClick={closeModalCallback}
            className="modal-heading-container-close-icon"
          />
        </div>

        {/* Modal Body */}
        <div className="modal-body-container">
          {/* Search Bar and Pagination (placed side by side) */}
          <div
            style={{
              display: "flex",
              alignItems: "center",
              justifyContent: "space-between",
              marginBottom: "1rem",
            }}
          >
            <CloudCoreSearchBar
              placeholder="Search for permissions..."
              searchValue={searchValue}
              setSearchValue={(e) => {
                setSearchValue(e.target.value);
                resetPages();
              }}
            />
            <Pagination
              variant="outlined"
              shape="rounded"
              boundaryCount={1}
              siblingCount={1}
              count={totalPages}
              page={page}
              onChange={handleChangePage}
            />
          </div>

          {/* Permissions Grid */}
          <div
            className="permissions-container flex flex-wrap gap-4"
            style={{ marginTop: "1rem" }}
          >
            {permissionsOnCurrentPage()}
          </div>
        </div>

        {/* Modal Footer */}
        <div
          className="modal-action-container flex justify-end gap-2"
          style={{ marginTop: "1rem" }}
        >
          <Button
            variant="contained"
            color="error"
            onClick={closeModalCallback}
          >
            Cancel
          </Button>
          <Button
            variant="outlined"
            onClick={() => {
              alert(
                `Selected Permissions: ${selectedPermissions
                  .map((p) => p.name)
                  .join(", ")}`
              );
              closeModalCallback();
            }}
          >
            Confirm Permission
          </Button>
        </div>
      </div>
    </ModalTemplate>
  );
};

export default AddPermissionModalHardcoded;
