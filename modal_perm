import React, { useState, useEffect } from "react";
import { ImCross } from "react-icons/im";
import { Button, Pagination } from "@mui/material";
import { useDispatch, useSelector } from "react-redux";
import { toggleShowAddAdminPermissionModal } from "../../store/slices/ModalManager";
import ModalTemplate from "./ModalTemplate";

// Custom hooks and components
import usePaginationHandler from "../../hooks/usePaginationHandler";
import CloudCoreSearchBar from "../../components/CustomStyledComponents/CloudSearchBar";
import AddPermissionToCartTitle from "../../PermissionComponents/AddPermissionToCartTitle";
import NotContentFound from "../NoContentFound";

// API hook to fetch all universal permissions
import { useGetAllUniversalPermissionsQuery } from "../../services/TeamsApiService";

// Import external Tailwind CSS
import "../../css/AddPermissionModal.css";

const AddPermissionModalFromDB = () => {
  const dispatch = useDispatch();

  const modalHeading = useSelector(
    (state) => state.modalManager.addAdminPermissionModal.heading
  );
  const show = useSelector(
    (state) => state.modalManager.addAdminPermissionModal.show
  );

  if (!show) return null;

  // Destructure the custom pagination hook (array format)
  const [{ page, rowsPerPage }, resetPages, handleChangePage] =
    usePaginationHandler();

  // Override rowsPerPage to 4
  const fixedRowsPerPage = 4;

  const [searchValue, setSearchValue] = useState("");
  const [selectedPermissions, setSelectedPermissions] = useState([]);
  const [filteredPermissions, setFilteredPermissions] = useState([]);

  // Fetch all permissions from the DB
  const { data: allPermissions = [], isLoading: permissionsLoading } =
    useGetAllUniversalPermissionsQuery();

  // Filter permissions based on search query
  useEffect(() => {
    if (allPermissions && !permissionsLoading) {
      const formattedSearch = searchValue.toLowerCase();
      const filtered = allPermissions.filter((permission) => {
        const nameMatched = permission.name.toLowerCase().includes(formattedSearch);
        const descriptionMatched = permission.description.toLowerCase().includes(formattedSearch);
        return nameMatched || descriptionMatched;
      });
      setFilteredPermissions(filtered);
      resetPages();
    }
  }, [searchValue, allPermissions, permissionsLoading, resetPages]);

  const totalPages = Math.ceil(filteredPermissions.length / fixedRowsPerPage);

  // Render permission tiles for the current page
  const permissionsOnCurrentPage = () => {
    if (filteredPermissions.length > 0 || !permissionsLoading) {
      const perms = [];
      const startIndex = fixedRowsPerPage * (page - 1);
      const endIndex = Math.min(filteredPermissions.length, fixedRowsPerPage * page);
      for (let i = startIndex; i < endIndex; i++) {
        const permission = filteredPermissions[i];
        perms.push(
          <AddPermissionToCartTitle
            key={`db-permission-${permission.id}`}
            isLoading={permissionsLoading}
            permission={permission}
            permissionSelected={selectedPermissions.some(
              (perm) => perm.name === permission.name
            )}
            togglePermission={() => {
              let updatedSelected = [...selectedPermissions];
              const index = updatedSelected.findIndex(
                (perm) => perm.name === permission.name
              );
              if (index !== -1) {
                updatedSelected.splice(index, 1);
              } else {
                updatedSelected.push({ name: permission.name });
              }
              setSelectedPermissions(updatedSelected);
            }}
          />
        );
      }
      return perms;
    } else {
      return (
        <div className="no-permissions">
          <NotContentFound />
          <span className="no-permissions-text">No permissions found</span>
        </div>
      );
    }
  };

  const closeModalCallback = () => {
    dispatch(toggleShowAddAdminPermissionModal({ show: false }));
  };

  return (
    <ModalTemplate closeModalCallback={closeModalCallback}>
      <div className="modal-container">
        {/* Modal Header */}
        <div className="modal-header">
          <div className="modal-title">{modalHeading}</div>
          <ImCross onClick={closeModalCallback} className="modal-close" />
        </div>

        {/* Modal Body */}
        <div className="modal-body">
          <div className="modal-search-pagination">
            <CloudCoreSearchBar
              placeholder="Permission name"
              disabled={filteredPermissions.length === 0 && searchValue.length === 0}
              searchValue={searchValue}
              setSearchValue={(e) => setSearchValue(e.target.value)}
            />
            <Pagination
              variant="outlined"
              shape="rounded"
              boundaryCount={0}
              siblingCount={0}
              page={page}
              onChange={handleChangePage}
              count={totalPages}
              showFirstButton
              showLastButton
            />
          </div>
          <div className="modal-content">
            {permissionsOnCurrentPage()}
          </div>
        </div>

        {/* Modal Footer */}
        <div className="modal-footer">
          <Button variant="contained" color="error" onClick={closeModalCallback}>
            Cancel
          </Button>
          <Button
            variant="outlined"
            onClick={() => {
              alert(
                `Selected Permissions: ${selectedPermissions
                  .map((p) => p.name)
                  .join(", ")}`
              );
              closeModalCallback();
            }}
          >
            Confirm Permission
          </Button>
        </div>
      </div>
    </ModalTemplate>
  );
};

export default AddPermissionModalFromDB;
